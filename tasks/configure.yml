---

- name: jenkins-configure | Ensure Jenkins is stopped
  service: name=jenkins state=stopped
  sudo: yes

- name: jenkins-configure | Create home folder
  file: state=directory path={{ jenkins_home }} mode=0755 owner={{ jenkins_user }}
  sudo: yes
  ignore_errors: True

- name: jenkins-configure | Create {{ jenkins_home }} with full rights for vagrant
  file: state=directory mode=0777 path={{ jenkins_home }} owner=vagrant group=vagrant
  sudo: yes
  when: jenkins_remote_enabled

- name: jenkins-configure | Change permission.
  file: path={{jenkins_home}} owner=vagrant group=vagrant recurse=yes
  sudo: yes
  when: jenkins_remote_enabled

- name: jenkins-configure | Configure Jenkins service
  template: src=jenkins.j2 dest={{jenkins_configuration}}
  sudo: yes
  register: jenkins_service_configure

- name: jenkins-configure | Add Jenkins key for remote access
  authorized_key: user=vagrant key="{{ lookup('file', "../vagrant/keys/" + "mgr.jenkins.pub") }}"
  delegate_to: "{{ remote_jenkins_delegated_ip }}"
#  become: yes

- name: jenkins-configure | Restore configuration from backup
  #synchronize: mode=pull src={{ jenkins_remote_user }}@{{ jenkins_remote_ip }}:{{ jenkins_remote_backup }} dest="{{ jenkins_home }}/" rsync_opts=--rsh='ssh -i {{ jenkins_remote_rsa }}',--compress
  command: rsync -lptgoD --rsh='ssh -i {{ jenkins_remote_rsa }}' {{ jenkins_remote_user }}@{{ jenkins_remote_ip }}:{{ jenkins_remote_backup }}/* {{ jenkins_home }}/
  delegate_to: "{{ remote_jenkins_delegated_ip }}"
#TODO try become
#  become: true
#  become_method: sudo
#  become_user: jenkins
  #when: jenkins_service_configure.changed
  when: jenkins_remote_enabled

- name: jenkins-configure | Restore users from master
  #synchronize: mode=pull src="{{ jenkins_remote_user }}@{{ jenkins_remote_ip }}:{{ jenkins_remote_path }}/users/" dest={{ jenkins_home }}/users/ rsync_opts=--rsh='ssh -i {{ jenkins_remote_rsa }}',--recursive,--compress
  command: rsync -a --rsh='ssh -i {{ jenkins_remote_rsa }}' {{ jenkins_remote_user }}@{{ jenkins_remote_ip }}:{{ jenkins_remote_path }}/users/ {{ jenkins_home }}/users/
  delegate_to: "{{ remote_jenkins_delegated_ip }}"
  #when: jenkins_service_configure.changed
  when: jenkins_remote_enabled

- name: jenkins-configure | Restore jobs from master
  command: rsync -a --exclude 'builds' --rsh='ssh -i {{ jenkins_remote_rsa }}' {{ jenkins_remote_user }}@{{ jenkins_remote_ip }}:{{ jenkins_remote_path }}/jobs/ /jenkins/jobs/
  delegate_to: "{{ remote_jenkins_delegated_ip }}"
  #when: jenkins_service_configure.changed
  when: jenkins_remote_enabled

- name: jenkins-configure | Restore userContent from master
  command: rsync -a --rsh='ssh -i {{ jenkins_remote_rsa }}' {{ jenkins_remote_user }}@{{ jenkins_remote_ip }}:/jenkins/userContent/ /jenkins/userContent/
  delegate_to: "{{ remote_jenkins_delegated_ip }}"
  #when: jenkins_service_configure.changed
  when: jenkins_remote_enabled

- name: jenkins-configure | Enable groovy scripts
  shell: sed -i "s;<permission>hudson.model.Hudson.RunScripts:{{ jenkins_swarm_user }}</permission>;<permission>hudson.model.Hudson.RunScripts:anonymous</permission>;g" {{ jenkins_home }}/config.xml
  #when: jenkins_service_configure.changed
  when: jenkins_remote_enabled

- name: jenkins-configure | Enable swarm connect for anonymous
  shell: sed -i "s;<permission>hudson.model.Computer.Connect:{{ jenkins_swarm_user }}</permission>;<permission>hudson.model.Computer.Connect:anonymous</permission>;g" {{ jenkins_home }}/config.xml
  #when: jenkins_service_configure.changed
  when: jenkins_remote_enabled and jenkins_swarm_enabled

- name: jenkins-configure | Enable swarm create for anonymous
  shell: sed -i "s;<permission>hudson.model.Computer.Create:{{ jenkins_swarm_user }}</permission>;<permission>hudson.model.Computer.Create:anonymous</permission>;g" {{ jenkins_home }}/config.xml
  #when: jenkins_service_configure.changed
  when: jenkins_remote_enabled and jenkins_swarm_enabled

- name: jenkins-configure | Set ownership on all jenkins files
  file: path={{ jenkins_home }} owner={{ jenkins_user }} group={{ jenkins_group }} state=directory recurse=true
  sudo: yes
  #when: jenkins_service_configure.changed

- name: jenkins-configure | Ensure Jenkins restarted
  service: name=jenkins state=restarted
  changed_when: False
  sudo: yes
  #when: jenkins_service_configure.changed and jenkins_restart_enabled
  when: jenkins_restart_enabled

- name: jenkins-configure | Wait untils Jenkins web API is available
  shell: curl --head --silent http://{{ jenkins_http_host }}:{{ jenkins_http_port }}{{ jenkins_prefix }}/cli/
  delay: 20
  retries: 12
  until: result.stdout.find("200 OK") != -1
  register: result
  changed_when: False
  when: jenkins_service_configure.changed and jenkins_restart_enabled

- name: jenkins-configure | Copy jenkins-cli
  get_url: url=http://{{ jenkins_http_host }}:{{ jenkins_http_port }}{{ jenkins_prefix }}/jnlpJars/jenkins-cli.jar dest={{ jenkins_home }}/jenkins-cli.jar
  register: jenkins_cli
  until: "'OK' in jenkins_cli.msg or 'file already exists' in jenkins_cli.msg"
  sudo: yes
  retries: 10
  delay: 10
  when: jenkins_restart_enabled

- name: jenkins-configure | Copy Groovy file to disable jobs
  copy: src=./files/DisableAllJobs.groovy dest={{ jenkins_home }}/DisableAllJobs.groovy owner=vagrant group=vagrant mode=0644
  sudo: yes

- name: jenkins-configure | Copy Groovy files to remove nodes
  copy: src=./files/RemoveAllNodes.groovy dest={{ jenkins_home }}/RemoveAllNodes.groovy owner=vagrant group=vagrant mode=0644
  sudo: yes

- name: jenkins-configure | Run groovy scripts
  shell: java -jar {{ jenkins_home }}/jenkins-cli.jar -s http://{{jenkins_http_host}}:{{ jenkins_http_port }}{{ jenkins_prefix }} -i {{ jenkins_remote_rsa }} groovy {{ item }}
  sudo: yes
  with_items:
    - ./files/DisableAllJobs.groovy
    - ./files/RemoveAllNodes.groovy
  when: jenkins_groovy_enabled and jenkins_restart_enabled

- name: jenkins-configure | Configure Jenkins System
  template: src=jenkins_system_config.xml.j2 dest={{jenkins_home}}/jenkins.model.JenkinsLocationConfiguration.xml owner={{ jenkins_user }} group={{ jenkins_group }} force=yes
  sudo: yes
  notify: [jenkins reload configuration]

- name: jenkins-configure | Configure log rotation
  template: src=logrotate.conf.j2 dest=/etc/logrotate.d/jenkins.conf
  sudo: yes
  when: jenkins_logrotate
